generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Anime {
  anime_id          Int              @id @default(autoincrement())
  id                String           @db.VarChar(255)
  type              String?           @db.VarChar(255)
  link              String?           @db.VarChar(255)
  title             String?           @db.VarChar(255)
  title_orig        String?           @db.VarChar(255)
  other_title       String?           @db.VarChar(255)
  translation       Json?
  year              Int?
  last_season       Int?
  last_episode      Int?
  episodes_count    Int?
  kinopoisk_id      String?          @db.VarChar(255)
  imdb_id           String?          @db.VarChar(255)
  worldart_link     String?          @db.VarChar(255)
  shikimori_id      String?          @db.VarChar(255)
  quality           String?          @db.VarChar(255)
  camrip            Boolean?
  lgbt              Boolean?
  blocked_countries String[]         @db.VarChar(255)
  blocked_seasons   Json?
  seasons           Json?
  blocked           Boolean          @default(false)      
  rating            Float?
  top               Boolean?         @default(false)
  top_order         Int?             @default(-1)
  popular           Boolean?         @default(false)
  popular_order     Int?             @default(-1)
  createdAt         DateTime         @db.Timestamptz(6)
  updatedAt         DateTime         @db.Timestamptz(6)
  FavouriteAnime    FavouriteAnime[]
  genres            Genre[]
  material_data     MaterialData?
  ViewedAnime       ViewedAnime[]

  @@index([id], map: "anime_id_index")
  @@index([other_title], map: "anime_other_index")
  @@index([title], map: "anime_title_index")
  @@index([year], map: "anime_year_index")
}

model Favourite {
  id             Int              @id @default(autoincrement())
  user_id        Int
  createdAt      DateTime         @db.Timestamptz(6)
  updatedAt      DateTime         @db.Timestamptz(6)
  user           User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  favouriteAnime FavouriteAnime[]
}

model FavouriteAnime {
  id           Int        @id @default(autoincrement())
  favourite_id Int?
  anime_Id     Int?
  createdAt    DateTime   @db.Timestamptz(6)
  updatedAt    DateTime   @db.Timestamptz(6)
  anime        Anime?     @relation(fields: [anime_Id], references: [anime_id], onDelete: Cascade)
  favourite    Favourite? @relation(fields: [favourite_id], references: [id], onDelete: Cascade)
}

model Genre {
  id         Int          @id @default(autoincrement())
  title      String?      @db.VarChar(255)
  count      Int?
  createdAt  DateTime     @db.Timestamptz(6)
  updatedAt  DateTime     @db.Timestamptz(6)
  anime      Anime[]
  @@index([title], map: "genre-title-index")
}

model GenreAnime {
  id        Int      @id @default(autoincrement())
  genre_id  Int?
  anime_id  Int?
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
}

model HomeSlider {
  id                Int      @id @default(autoincrement())
  image_url         String   @db.VarChar(255)
  preview_image_url String   @db.VarChar(255)
  season            Int?
  rating            Int?
  title             String?  @db.VarChar(255)
  description       String?  @db.VarChar(255)
  order             Int?
  anime_id          Int
  createdAt         DateTime @db.Timestamptz(6)
  updatedAt         DateTime @db.Timestamptz(6)
}

model MaterialData {
  id               Int       @id @default(autoincrement())
  anime_id         Int       @unique 
  title            String?   @db.VarChar(255)
  anime_title      String?   @db.VarChar(255)
  title_en         String?   @db.VarChar(255)
  other_titles     String[]  @db.VarChar(255)
  other_titles_en  String[]  @db.VarChar(255)
  other_titles_jp  String[]  @db.VarChar(255)
  anime_kind       String?   @db.VarChar(255)
  all_status       String?   @db.VarChar(255)
  anime_status     String?   @db.VarChar(255)
  year             Int?
  description      String?
  poster_url       String?   @db.VarChar(255)
  screenshots      String[]  @db.VarChar(255)
  duration         Int?
  countries        String[]  @db.VarChar(255)
  all_genres       String[]  @db.VarChar(255)
  genres           String[]  @db.VarChar(255)
  anime_genres     String[]  @db.VarChar(255)
  anime_studios    String[]  @db.VarChar(255)
  kinopoisk_rating Float?
  kinopoisk_votes  Int?
  imdb_rating      Float?
  imdb_votes       Int?
  shikimori_rating Float?
  shikimori_votes  Int?
  premiere_world   String?   @db.VarChar(255)
  aired_at         DateTime? @db.Timestamptz(6)
  next_episode_at  DateTime? @db.Timestamptz(6)
  rating_mpaa      String?   @db.VarChar(255)
  episodes_total   Int?
  episodes_aired   Int?
  actors           String[]  @db.VarChar(255)
  directors        String[]  @db.VarChar(255)
  producers        String[]  @db.VarChar(255)
  writers          String[]  @db.VarChar(255)
  composers        String[]  @db.VarChar(255)
  editors          String[]  @db.VarChar(255)
  designers        String[]  @db.VarChar(255)
  operators        String[]  @db.VarChar(255)
  createdAt        DateTime  @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  anime            Anime?    @relation(fields: [anime_id], references: [anime_id])

  @@index([all_genres], map: "material_data_genres_index")
  @@index([anime_status], map: "material_data_status_index")
}

model User {
  id              Int         @id @default(autoincrement())
  email           String?     @unique @db.VarChar(255)
  password        String?     @db.VarChar(255)
  login           String?     @unique @db.VarChar(255)
  avatar_url      String      @db.VarChar(255) @default("/uploads/avatars/default.jpg")
  wallpaper_url   String      @db.VarChar(255) @default("/uploads/wallpapers/default.jpg")
  minutes_watched Int         @default(0)
  admin           Boolean?    @default(false)
  createdAt       DateTime    @db.Timestamptz(6)
  updatedAt       DateTime    @db.Timestamptz(6)
  favourite       Favourite[]
  viewed          Viewed[]

  @@index([email], map: "user_email_index")
  @@index([login], map: "user_login_index")
}



model Viewed {
  id          Int           @id @default(autoincrement())
  user_id     Int
  createdAt   DateTime      @db.Timestamptz(6)
  updatedAt   DateTime      @db.Timestamptz(6)
  user        User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  viewedAnime ViewedAnime[]
}

model ViewedAnime {
  id        Int      @id @default(autoincrement())
  viewed_id Int?
  anime_Id  Int?
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  anime     Anime?   @relation(fields: [anime_Id], references: [anime_id], onDelete: Cascade)
  viewed    Viewed?  @relation(fields: [viewed_id], references: [id], onDelete: Cascade)
}
